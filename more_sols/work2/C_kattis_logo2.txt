1.
נתחיל מנקודה 0,0 ומזווית שרירותית ונלך במרחב דו מימדי לפי הפקודות:
עבור הפעולות fd,bk - נלך קדימה, אחורה לכיוון אליו אנחנו מסתכלים, זה נעשה באמצעות עדכון ערכי x,y 
x-+=  cos(alpha)*moveBy
y-+=  sin(alpha)*moveBy
עבור הפעולות rt,lt - נגדיל,נקטין את הזווית שלנו
ערך ההשלמה עבור fd,bk יהיה מרחק אוקלידי בין הנקודה בה סיימנו את לבין נקודת ההתחלה
ערך ההשלמה עבור lt,rt יכרוך בסימולציות הליכה נוספות שבכל סימולציה ננחש זווית במקום הערך החסר, יהיו סה"כ 360 סימולציות לכל אפשרויות הניחוש. נדע שהניחוש נכון אם נחזור לנקודת ההתחלה בסוף הסימולציה
2.
השלמת fd,bk:
נבחין כי מובטח שיהיה תמיד פתרון ולכן נקודת הסיום חייבת להיגמר בנקודת ההתחלה
בעצם הערך שחסר לנו הוא בדיוק המרחק מנקודת ההתחלה כי אותו ערך אחראי להזיז את כל "הצורה שציירנו" במרחב כולל את נקודת הסיום אליה הגענו, ההזה תצטרך להיות אל נקודת ההתחלה שגודלה בדיוק המרחק האוקלידי מנקודת הסיום
בנוסף מובטח שכל הערכים אי שליליים לכן אפשר להשלים מרחק ללא התחשבות בסימנים
השלמת rt,lt:
נתון טווח הזוויות שניתן להשלים הוא מספרים שלמים בין 0 ל 359 ושוב מכיוון שתמיד יש פתרון אז אפשר לסמלץ את ההליכה עבור כל ניחוש ולבדוק מתי מגיעים לנקודת ההתחלה
3.
סיבוכיות זמן - O(tc*n) (בכל טסט מבצעים מספר סימולציות סופי וכל סימולציה לוקחת O(n) זמן)
סיבוכיות זיכרון - O(n) לשמירות הפקודות
tc - כמות טסטים
n - כמות פקודות מקסימלי
4.
לשים לב שעושים המרות בין זוויות לרדיאנים
מגדילים את x,y במספרים לא שלמים בגלל הקוסינוס, סינוס ובגלל שאין חסם על אורך הצעדים שעושים אז כדאי לשמור אותם כ long double.
לשים לב לבצע את ההשוואות של ערכים לא שלמים עם EPS=10^-3
