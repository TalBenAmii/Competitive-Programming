אלגוריתם:
תכנון דינמי
dp[i][j] = מספר הפעולות המינימלי הדרוש להשמדת הבניינים 0 עד i כולל, כך שאם j=true אז הבניין הבא (i+1) קיים ואחרת (j=false) הוא כבר התפוצץ (או לא קיים בכלל במקרה של הבניינים בקצוות).
בסיס: dp[0][0] = מספר הפעולות להורדת כל הhp של הבניין הראשון
dp[0][1] = מספר הפעולות להורדת hp של הבניין הראשון פחות הנזק של הבניין השני.
צעד: d[i][j] = המינימום מבין קודם להשמיד את הבניין ה-i ואז את 0 עד i-1, לבין קודם להשמיד את 0 עד i-1 ואז את i.
(אם j=true אז בחישוב מספר הפעולות להשמדת i, מורידים את הנזק של הבניין i+1)
פלט: min(dp[n-1[0], dp[n-1][1]).
ממלאים את המערך משמאל לימין.

נכונות:
כדי לחשב את מספר הפעולות הדרוש להשמדת בניין i, צריך לדעת האם הבניים שלידו (i-1, i+1) התפוצצו כבר כי הם משנים את הhp שלו. 
ב-state אנו שומרים את המידע הזה ומחשבים את מספר הפעולות בהתאם עם הפונקציה calcMoves.


סיבוכיות זמן:
O(N*Tests) = 1M

סיבוכיות מקום:
O(N) = 10K
